tm_shape(lixels)+
tm_lines(col="density")
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
pallete = "Blues")
tm_shape()
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Blues")
tm_shape(H_P) +
tm_dots(col = "red")
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Blues") +
tm_shape(H_P) +
tm_dots(col = "red")
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Blues") +
tm_shape(H_P) +
tm_dots(col = "red",
size =0.1)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
shiny::runApp('Test')
pacman::p_load(sf, readr, tidyverse, tmap)
seoul <- st_read(dsn = "data_final/seoul_adm2",
layer= "seoul_adm2") %>%
st_transform(crs = 5179)
clinics <- st_read(dsn = "data_final/seoul_clinics",
layer = "seoul_clinics") %>%
st_transform(crs = 5179)
hospitals <- st_read(dsn = "data_final/seoul_hospitals",
layer = "seoul_hospitals") %>%
st_transform(crs = 5179)
residence <- st_read(dsn = "data_final/seoul_residential",
layer = "seoul_residential") %>%
st_transform(crs = 5179)
road <- st_read(dsn="data_final/seoul_roads",
layer = "seoul_roads_v2")%>%
st_transform(crs = 5179)
clinic <- clinics %>%
select(1,3)
hospitals <- hospitals %>%
select(1,3)
residence <- residence %>%
select(1,3)
road <- road %>%
select(1,3)
Ihwa <- seoul %>%
filter(name_en == "Gangnam-gu") %>%
select(name_en)
pacman::p_load(sf, spNetwork)
R <- st_intersection(road, Ihwa)
H <- st_intersection(hospitals, Ihwa)
RE <- st_intersection(residence, Ihwa)
H_P <- st_centroid(H)
RE_P <- st_centroid(RE)
if ("MULTILINESTRING" %in% st_geometry_type(R)){
converted <- st_cast(R[which(st_geometry_type(R) == "MULTILINESTRING"),], "LINESTRING")
linestring <- R[which(st_geometry_type(R) == "LINESTRING"),]
roads_by_gu_new<- rbind(linestring, converted)
}
# Filter out only LINESTRING geometries
lixels <- lixelize_lines(roads_by_gu_new, 700, mindist = 350)
hospital_by_gwanak_sp <- as_Spatial(H_P)
samples <- lines_center(lixels)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 20, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*1000
lixels$density <- densities*1000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
cross_kfunctions(roads_by_gu_new, RE_P, H_P, start= 0, end = 2500, step = 50, width = 50, nsim = 50, conf_int = 0.05)
cross_kfunctions(roads_by_gu_new,
RE_P,
H_P,
start= 0,
end = 2500,
step = 50,
width = 50,
nsim = 50,
agg = 50,
conf_int = 0.05)
cross_kfunctions(roads_by_gu_new,
RE_P,
H_P,
start= 0,
end = 2500,
step = 50,
width = 50,
nsim = 50,
agg = 100,
conf_int = 0.05)
crossfun_hospital<- cross_kfunctions(roads_by_gu_new,
RE_P,
H_P,
start= 0,
end = 2500,
step = 50,
width = 50,
nsim = 50,
agg = 100,
conf_int = 0.05)
crossfun_hospital$plotk
pacman::p_load(sf, readr, tidyverse, tmap)
seoul <- st_read(dsn = "data_final/seoul_adm2",
layer= "seoul_adm2") %>%
st_transform(crs = 5179)
clinics <- st_read(dsn = "data_final/seoul_clinics",
layer = "seoul_clinics") %>%
st_transform(crs = 5179)
hospitals <- st_read(dsn = "data_final/seoul_hospitals",
layer = "seoul_hospitals") %>%
st_transform(crs = 5179)
residence <- st_read(dsn = "data_final/seoul_residential",
layer = "seoul_residential") %>%
st_transform(crs = 5179)
road <- st_read(dsn="data_final/seoul_roads",
layer = "seoul_roads_v2")%>%
st_transform(crs = 5179)
clinic <- clinics %>%
select(1,3)
hospitals <- hospitals %>%
select(1,3)
residence <- residence %>%
select(1,3)
road <- road %>%
select(1,3)
Ihwa <- seoul %>%
filter(name_en == "Gangnam-gu") %>%
select(name_en)
pacman::p_load(sf, spNetwork)
R <- st_intersection(road, Ihwa)
H <- st_intersection(hospitals, Ihwa)
RE <- st_intersection(residence, Ihwa)
H_P <- st_centroid(H)
RE_P <- st_centroid(RE)
if ("MULTILINESTRING" %in% st_geometry_type(R)){
converted <- st_cast(R[which(st_geometry_type(R) == "MULTILINESTRING"),], "LINESTRING")
linestring <- R[which(st_geometry_type(R) == "LINESTRING"),]
roads_by_gu_new<- rbind(linestring, converted)
}
# Filter out only LINESTRING geometries
lixels <- lixelize_lines(roads_by_gu_new, 700, mindist = 350)
samples <- lines_center(lixels)
hospital_by_gwanak_sp <- as_Spatial(H_P)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 20, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "Blue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Red") +
tm_shape(H_P) +
tm_dots(col = "lue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
View(lixels)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density") +
tm_shape(H_P) +
tm_dots(size =0.01)
samples$density <- densities*1000
lixels$density <- densities*1000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
kfun_hospital <- kfunctions(roads_by_gu_new,
H_P,
start = 0,
end = 10000,
step = 50,
width = 50,
nsim = 50,
resolution = 50,
verbose = FALSE,
digits = 10,
conf_int = 0.05)
kfun_hospital$plotk
crossfun_hospital<- cross_kfunctions(roads_by_gu_new,
RE_P,
H_P,
start= 0,
end = 2500,
step = 50,
width = 50,
nsim = 50,
agg = 100,
conf_int = 0.05)
crossfun_hospital$plotk
# Filter out only LINESTRING geometries
lixels <- lixelize_lines(roads_by_gu_new, 1500, mindist = 350)
samples <- lines_center(lixels)
hospital_by_gwanak_sp <- as_Spatial(H_P)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 20, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*1000
lixels$density <- densities*1000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
?nkde()
# Filter out only LINESTRING geometries
lixels <- lixelize_lines(roads_by_gu_new, 700, mindist = 350)
samples <- lines_center(lixels)
hospital_by_gwanak_sp <- as_Spatial(H_P)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 20, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*100000
lixels$density <- densities*100000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 200, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*100000
lixels$density <- densities*100000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 1,
grid_shape = c(1,1),
max_depth = 8,
agg = 1000, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*1000
lixels$density <- densities*1000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
densities <- nkde(roads_by_gu_new,
events = H_P,
w = rep(1,nrow(H_P)),
samples = samples,
kernel_name = "quartic",
bw = 300,
div= "bw",
adaptive = FALSE,
method = "continuous",
digits = 1,
tol = 200,
grid_shape = c(1,1),
max_depth = 8,
agg = 5, #we aggregate events within a 5m radius (faster calculation)
sparse = TRUE,
verbose = FALSE)
samples$density <- densities*1000
lixels$density <- densities*1000
tmap_mode('view')
tm_shape(lixels)+
tm_lines(col="density",
palette = "Reds") +
tm_shape(H_P) +
tm_dots(col = "blue",
size =0.01)
kfun_hospital$plotg
crossfun_hospital$plotg
crossfun_hospital$plotk
shiny::runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
childcare_sf <- st_read("data/child-care-services-geojson.geojson")
childcare_sf <- st_read("child-care-services-geojson.geojson")
write_rds(childcare_sf, "childcare.rds")
runApp('Test')
Bus_stop <- st_read("test_data",
layer= "BusStop")
write_rds(Bus_stop, "bus.rds")
runApp('Test')
shiny::runApp('Test')
runApp('Test')
runApp('Test')
pacman::p_load(sf, readr, tidyverse, tmap)
clinic <- clinics %>%
dplyr::select(1,3)
Hospital_point <- st_centroid(hospitals)
clinics <- st_read(dsn = "data_final/seoul_clinics",
layer = "seoul_clinics") %>%
st_transform(crs = 5179)
hospitals <- st_read(dsn = "data_final/seoul_hospitals",
layer = "seoul_hospitals") %>%
st_transform(crs = 5179)
residence <- st_read(dsn = "data_final/seoul_residential",
layer = "seoul_residential") %>%
st_transform(crs = 5179)
road <- st_read(dsn="data_final/seoul_roads",
layer = "seoul_roads_v2")%>%
st_transform(crs = 5179)
clinic <- clinics %>%
dplyr::select(1,3)
hospitals <- hospitals %>%
dplyr::select(1,3)
residence <- residence %>%
dplyr::select(1,3)
road <- road %>%
dplyr::select(1,3)
Hospital_point <- st_centroid(hospitals)
residence_point <- st_centroid(residence)
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
seoul <- st_read(dsn = "data_final/seoul_adm2",
layer= "seoul_adm2") %>%
st_transform(crs = 5179)
seoul <- st_read(dsn = "data_final/seoul_adm2",
layer= "seoul_adm2")
write_rds(seoul, "seoul.rds")
road <- st_read(dsn="data_final/seoul_roads",
layer = "seoul_roads_v2")
if ("MULTILINESTRING" %in% st_geometry_type(road)){
converted <- st_cast(road[which(st_geometry_type(road) == "MULTILINESTRING"),], "LINESTRING")
linestring <- road[which(st_geometry_type(road) == "LINESTRING"),]
roads_by_gu_new<- rbind(linestring, converted)
}
write_rds(roads_by_gu_new, "road.rds")
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
install.packages("shinycssloaders")
runApp('Test')
shiny::runApp('Test')
install.packages("shinythemes")
runApp('Test')
install.packages("shinycssloaders")
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
H3 <- readRDS("C:/yifei-alpaca/Geospatial-Analytics-Project-KR/korea_rds_data/H3.rds")
View(H3)
R3 <- readRDS("C:/yifei-alpaca/Geospatial-Analytics-Project-KR/korea_rds_data/R3.rds")
View(R3)
Re3 <- readRDS("C:/yifei-alpaca/Geospatial-Analytics-Project-KR/korea_rds_data/Re3.rds")
View(Re3)
S3 <- readRDS("C:/yifei-alpaca/Geospatial-Analytics-Project-KR/korea_rds_data/S3.rds")
View(S3)
View(H3)
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test')
runApp('Test/sherry_app.R')
runApp('Test/sherry_app.R')
runApp('Test/sherry_app.R')
library(shiny); runApp('Test/sherry_app.R')
runApp('Test/sherry_app.R')
runApp('Test/sherry_app.R')
runApp('Test/sherry_app.R')
